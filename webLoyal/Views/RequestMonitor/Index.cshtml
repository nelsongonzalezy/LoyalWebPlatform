<div class="">

 
    <div class="container">

        <div class="">
            <div class="d-md-flex align-items-center justify-content-between mb-4">
                <div>
                    <ol class="breadcrumb fs-sm mb-1">
                        <li class="breadcrumb-item"><a href="../menu/index">@webLoyal.Resources.language.Resources.Menu</a></li>
                        <li class="breadcrumb-item active"><a href="../requestmonitor/index">requestmonitor/index</a></li>

                    </ol>

                </div>
                <nav class="nav nav-icon nav-icon-lg">

                    <a href="javascript:void(0);" class="nav-link" title="Refrescar" onclick="showSweetAlert()"><i class="ri-refresh-line"></i></a>

                </nav>
                
            </div>
            <div class="row g-3">
               
                <div class="col-xl-8">
                    @await Component.InvokeAsync("Requests")
                    <br />
                    @await Component.InvokeAsync("RequestMonitorList")

                </div><!-- col -->
                <div class="col-xl-4">
                    @await Component.InvokeAsync("Product")
                </div><!-- col -->
            </div><!-- row -->

        </div>

    </div>

</div>
@section Scripts{
    <script>
        //// Función para mostrar una alerta estilo SweetAlert
        //function showSweetAlert() {
        //    Swal.fire({
        //        position: 'top-end',
        //        text: "Refrescando...",
        //        icon: "info",
        //        timer: 2000, // 2 segundos
        //        timerProgressBar: true,
        //        showConfirmButton: false
        //    }).then(() => {
        //        location.reload(); // Refrescar la página después de cerrar la alerta
        //    });
        //}
        //function startInterval() {
        //    let countdown = 1;

        //    const interval = setInterval(() => {
        //        Swal.fire({
        //            title: `Refrescando en ${countdown} segundos...`,
        //            icon: "info",
        //            timer: 1000, // 1 segundo
        //            timerProgressBar: true,
        //            showConfirmButton: false,
        //            position: 'top'
        //        });

        //        countdown--;

        //        if (countdown < 0) {
        //            clearInterval(interval);
        //            showSweetAlert(); // Ejecutar la función después del conteo regresivo
        //        }
        //    }, 1000); // 1 segundo
        //}



        document.addEventListener("DOMContentLoaded", function () {
            startInterval();
        });

        // Función para mostrar un mensaje con un temporizador de cierre automático
        function showSweetAlert() {
            Swal.fire({
                position: 'top-end',
                text:'Actualizando',

                timer: 2000, // 2 segundos
                timerProgressBar: true,
                showConfirmButton: false,
            }).then(() => {
                location.reload(); // Refrescar la página después de cerrar la alerta
            });
        }

        // Función para comenzar el intervalo de 1 minuto con conteo regresivo de 10 segundos
        function startInterval() {
            let countdown = 10;

            const interval = setInterval(() => {
                Swal.fire({
                    position: 'top-end',
                    text: 'Actualizando',

                    timer: 2000, // 2 segundos
                    timerProgressBar: true,
                    showConfirmButton: false,
                }).then(() => {
                    location.reload(); // Refrescar la página después de cerrar la alerta
                });

                countdown--;

                if (countdown < 0) {
                    clearInterval(interval);
                    showSweetAlert(); // Ejecutar la función después del conteo regresivo
                }
            }, 50000); // 1 segundo
        }





        $("table").DataTable({
            searchBuilder: true,
            class: 'table table-borderless mb-0 dataTable-loading searchable dataTable-wrapper no-footer sortable fixed-columns',
            fixedColumns: true,
            order: [[0, "desc"]],
            dom: 'Bfrt<"col-md-6 inline"i> <"col-md-6 inline"p>',
            buttons: [
                {
                    extend: 'excelHtml5',
                    autoFilter: true,
                    className: 'btn btn-outline-primary',
                    filename: '@nameof(core.Service.PoliciesDetailModel)Excel',
                },
                {
                    extend: 'pdfHtml5',
                    className: 'btn btn-outline-primary',
                    filename: '@nameof(core.Service.PoliciesDetailModel)Pdf',
                }
            ]
        });



    </script>
    }
